@page "/login"
@using BlazorApp.Components.Model
@using BlazorApp.Components.Data
@using BlazorApp.Components.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inherits OwningComponentBase<EmployeeService>
@inject NavigationManager navigationManager
<div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
    <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
        <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="@Model.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="@Model.Password" class="form-control" type="password" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
    </EditForm>
</div>


@code {
    [CascadingParameter]
    public HttpContext? HttpContext{ get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var accountValidation = Service.FindEmployee(Model);

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.UserName),
            new Claim(ClaimTypes.Role, accountValidation.role)
        };
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/create");
    }
}
